{"title":"Async Await usage and pitfalls in Array.prototype.map() and chaining","description":"Using async await in array methods is quite tricky. But it gets even trickier when you chain multiple array methods. Find out how.","date":"29 Sep, 2020 3:35 PM","published":true,"cover_image":"media/blog-social-intro.png","body":"<p>Let's consider the code below</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> IDs = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">const</span> usersData = IDs.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">async</span> (id) =&gt; <span class=\"hljs-keyword\">await</span> getUserData(id));\n\n<span class=\"hljs-built_in\">console</span>.log(usersData);\n</code></pre>\n<p>What would this output?</p>\n<pre><code class=\"language-js\">[<span class=\"hljs-built_in\">Promise</span>, <span class=\"hljs-built_in\">Promise</span>, <span class=\"hljs-built_in\">Promise</span>];\n</code></pre>\n<p>All these are promises. But we are expecting data as objects(or whatever other format you can think of) here. How do <code>await</code> every single array item?</p>\n<p>The solution here is <code>Promise.all</code>. Quick recap:</p>\n<p><code>Promise.all</code> takes in an array of promises, runs them concurrently until they <code>all</code> resolve, and return a bigger <code>promise</code> with the outcomes from those promises as resolved values as an Array</p>\n<p>For example</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">await</span> Promise.<span class=\"hljs-literal\">all</span>([getUserData(<span class=\"hljs-number\">1</span>), getUserData(<span class=\"hljs-number\">2</span>), getUserData(<span class=\"hljs-number\">3</span>)]);\n</code></pre>\n<p>will return</p>\n<pre><code class=\"language-js\">[\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1, ...otherData</span> },\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2, ...otherData</span> },\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3, ...otherData</span> },\n];\n</code></pre>\n<p>If you think about it, the code snippet where we're mapping over IDs is just an Array of Promises. We can directly <code>Promise.all</code> that array</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> IDs = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">const</span> usersDataPromises = IDs.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">async</span> (id) =&gt; <span class=\"hljs-keyword\">await</span> getUserData(id));\n\n<span class=\"hljs-keyword\">const</span> usersData = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(usersDataPromises);\n\n<span class=\"hljs-built_in\">console</span>.log(usersData);\n</code></pre>\n<p>That would output us the same object as above</p>\n<pre><code class=\"language-js\">[\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1, ...otherData</span> },\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 2, ...otherData</span> },\n  { <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 3, ...otherData</span> },\n];\n</code></pre>\n<h1 id=\"Tricky-part\"><a class=\"heading-link\" href=\"blog/chaining-promises-array-methods#Tricky-part\">#</a>Tricky part</h1>\n<p>The trick above works like a charm. However, difficulty arises when you chain another array method to the existing array, like this</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> IDs = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">const</span> usersDataPromise = IDs.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">async</span> (id) =&gt; <span class=\"hljs-keyword\">await</span> getUserData(id)).<span class=\"hljs-keyword\">map</span>(\n  <span class=\"hljs-keyword\">async</span> (data) =&gt; <span class=\"hljs-keyword\">await</span> getPosts(data)\n);\n\n<span class=\"hljs-keyword\">const</span> usersData = <span class=\"hljs-built_in\">Promise</span>.all(usersDataPromise);\n\n<span class=\"hljs-built_in\">console</span>.log(usersData);\n</code></pre>\n<p>It will return an error. Why?</p>\n<p><code>Promise.all</code> tries to run all promises at once. And I mean, <strong>All of them</strong>. It will try to run the 2nd <code>map</code> <strong>alongside</strong> the first map. You can see for yourself this is a problem, as the second <code>map</code> depends on the value from the first.</p>\n<p>How do we resolve this (Pun intended <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜Ž\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f60e.svg\">)?</p>\n<h1 id=\"Solutions\"><a class=\"heading-link\" href=\"blog/chaining-promises-array-methods#Solutions\">#</a>Solutions</h1>\n<p>There can be many ways to solve this problem. I will share 2 here</p>\n<h2 id=\"1st\"><a class=\"heading-link\" href=\"blog/chaining-promises-array-methods#1st\">#</a>1st</h2>\n<p><code>Promise.all</code> at every single step</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> IDs = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">const</span> usersData = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(\n  IDs.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">async</span> (id) =&gt; <span class=\"hljs-keyword\">await</span> getUserData(id))\n);\n\n<span class=\"hljs-keyword\">const</span> usersPosts = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(\n  usersData.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">async</span> (userData) =&gt; <span class=\"hljs-keyword\">await</span> getPosts(userData))\n);\n</code></pre>\n<h2 id=\"2nd\"><a class=\"heading-link\" href=\"blog/chaining-promises-array-methods#2nd\">#</a>2nd</h2>\n<p>A plain old <code>for of</code> loop:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> IDs = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">const</span> usersPosts = [];\n\n<span class=\"hljs-keyword\">for</span> (let id of IDs) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">user</span>Data = await getUsersData(id);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">user</span>Posts = await getPosts(<span class=\"hljs-keyword\">user</span>Data);\n\n  usersPosts.push(<span class=\"hljs-keyword\">user</span>Posts);\n}\n</code></pre>\n<p>I prefer the 2nd approach. If you wanna add an extra step, you simply add an extra line, whereas the 2st will require a whole extra <code>Promise.all(array map)</code>, which ultimately is just code redundancy.</p>\n","id":"chaining-promises-array-methods","reading_time":1.3275}