{"title":"Why I moved from Styled Components to (S)CSS modules","description":"A little writeup of my reasons behind moving from Styled Components to SCSS modules, and the benefits I got out of this.","date":"16 April, 2021","cover_image":"media/why-move-styled-to-css-modules--cover.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 66.66666666666666%;background-color: rgb(200, 72, 72)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/why-move-styled-to-css-modules--cover/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/why-move-styled-to-css-modules--cover/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/why-move-styled-to-css-modules--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/why-move-styled-to-css-modules--cover/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/why-move-styled-to-css-modules--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p>Artwork by <a href=\"https://unsplash.com/photos/wQLAGv4_OYs\" target=\"_blank\" rel=\"noopener\">Lucas Benjamin</a></p>\n</blockquote>\n<p>This blog post will be about my reasons to move from Styled Components to SCSS Modules. Its gonna be a raw and non-technical one (i.e., you probably won't learn anything new from it).</p>\n<h1 id=\"What-is-styled-components\"><a class=\"heading-link\" href=\"blog/move-to-css-modules-from-styled-components#What-is-styled-components\">#</a>What is styled-components?</h1>\n<p>Styled Components is a radical, new way of writing CSS for your React components. You can simply create components out of your styles</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> Main </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">HelloWorld</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\">Hello World</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #FFCB6B\">HelloWorld</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> HelloWorld </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">styled</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">h1</span><span style=\"color: #89DDFF\">`</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  font-weight: 700;</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  line-height: 1.618;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">`</span><span style=\"color: #89DDFF\">;</span></span></code></pre>\n<p>This is a very, very convenient way of wiring CSS. All your CSS lives in the same file as your main logic. Its ultimate <a href=\"https://kentcdodds.com/blog/colocation/\" target=\"_blank\" rel=\"noopener\">Colocation</a>. Plus if you're a freak about small components, this really enforces you to write smaller components, cuz the components grow large very quickly thanks to all 3 techs in a single file: HTML + CSS + TS(Yes, I'm one of those people who dream in TypeScript). So you kinda feel obligated to break your components into smaller pieces, which is ultimately good.</p>\n<p>Its just like Svelte and Vue's SFCs. They figured it out correctly, while this makes me mad about React.</p>\n<p>Anyways, rant aside, this way of writing is really good, I can't insist enough. Need dynamic prop based styles, no worries, just pass props over to your styled component, and use it in there</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> Main </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">HelloWorld</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">weight</span><span style=\"color: #89DDFF\">={</span><span style=\"color: #F78C6C\">600</span><span style=\"color: #89DDFF\">}&gt;</span><span style=\"color: #A6ACCD\">Hello World</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #FFCB6B\">HelloWorld</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> HelloWorld </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">styled</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">h1</span><span style=\"color: #89DDFF\">&lt;{</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #F07178\">weight</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">}&gt;`</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  font-weight: </span><span style=\"color: #89DDFF\">${</span><span style=\"color: #89DDFF\">({</span><span style=\"color: #A6ACCD\"> weight </span><span style=\"color: #89DDFF\">})</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> weight</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #C3E88D\">;</span></span>\n<span class=\"line\"><span style=\"color: #C3E88D\">  line-height: 1.618;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">`</span><span style=\"color: #89DDFF\">;</span></span></code></pre>\n<blockquote>\n<p>Pardon the TypeScript code if you're not familiar with it or hate it. It can't be helped. Its part of my very being now <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f607.svg\">.</p>\n</blockquote>\n<p>It makes stuff very very easy. But this is where it starts to go wrong if you don't fully understand how React and its rendering processes work.</p>\n<p>And yes, it automatically does the scoping and vendor prefixing. vendor prefixing is runtime generated, that is it determines if the browser needs vendor prefixes, then it will churn out styles with vendor prefixes. Its like a sweet runtime PostCSS and Autoprefixer running in the browser.</p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/why-move-styled-to-css-modules--here-be-dragons/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/why-move-styled-to-css-modules--here-be-dragons.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"What-are-CSS-Modules\"><a class=\"heading-link\" href=\"blog/move-to-css-modules-from-styled-components#What-are-CSS-Modules\">#</a>What are CSS Modules?</h1>\n<p>CSS Modules is a slightly-less radical way of writing CSS. Its basically separate CSS files, but only modular. Syntax remains the same mostly, but it's scoped to the components where it is used (By mangling class names). The general pattern of these is this:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">|-HelloWorld\n  |-HelloWorld.tsx\n  |-HelloWorld.module.css\n</span></span></code></pre>\n<blockquote>\n<p>Notice I use .css at the end. It could be .scss or .less or .styl too, you name it. I personally use SCSS modules</p>\n</blockquote>\n<p>Notice that out CSS Module has in the name itself that its a module, <code>*.module.*</code>. Its a <mark>Convention over Configuration</mark> approach, very prevalent in futuristic bundlers like <a href=\"https://esbuild.github.io/\" target=\"_blank\" rel=\"noopener\">ESBuilt</a>, <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener\">Vite</a>, <a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"noopener\">Snowpack</a>, etc.</p>\n<p>And to use them, you import the css file in JS, and refer to it like this.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #A6ACCD\"> css </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./HelloWorld.module.css</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> Main </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">h1</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">className</span><span style=\"color: #89DDFF\">={</span><span style=\"color: #A6ACCD\">css</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">helloWorld</span><span style=\"color: #89DDFF\">}&gt;</span><span style=\"color: #A6ACCD\">Hello World</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">h1</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span></code></pre>\n<p>Meanwhile out CSS file:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">/* HelloWorld.module.css */</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">helloWorld</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #B2CCD6\">font-weight</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">700</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #B2CCD6\">line-height</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1.618</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre>\n<p>The generated CSS is something like this:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">/* HelloWorld.module.css */</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">__B56BLAH_helloWorld_4269BRUHBRUH</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #B2CCD6\">font-weight</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">700</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #B2CCD6\">line-height</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1.618</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre>\n<p>The className is mangled, and the value is substituted in place of <code>css.helloWorld</code> in out component.</p>\n<blockquote>\n<p>Alright I took some artistic liberty and added some weird Elon Musk-y stuff there. The actual mangled output would be much smaller and sane <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f601.svg\"></p>\n</blockquote>\n<p>CSS modules are very handy for this. Plus you can add tooling like <code>autoprefixer</code> to add vendor prefixes, compile stuff back to old CSS for browser compatibility.</p>\n<h1 id=\"The-app-in-question\"><a class=\"heading-link\" href=\"blog/move-to-css-modules-from-styled-components#The-app-in-question\">#</a>The app in question</h1>\n<p>Now the intro is over, lets look at the app which I moved from Styled components to CSS modules.</p>\n","id":"move-to-css-modules-from-styled-components","reading_time":2.77,"toc":[{"indent":0,"id":"","title":"What is styled-components?","length":26},{"indent":0,"id":"","title":"What are CSS Modules?","length":21},{"indent":0,"id":"","title":"The app in question","length":19}]}