{"title":"Bye bye Callbacks, hello Promises in NodeJS","description":"Completely get rid of callbacks in NodeJS and replace them with the great Promises.","date":"25 Jan 2021 12:00 AM","cover_image":"media/promisify-callbacks-in-nodejs-promises-everywhere.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 55.57986870897156%;background-color: rgb(124, 106, 89)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/promisify-callbacks-in-nodejs-promises-everywhere/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/promisify-callbacks-in-nodejs-promises-everywhere/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/promisify-callbacks-in-nodejs-promises-everywhere/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>These is gonna be a meme-tastic blog post. Strap yourself in.</p>\n<p>So, I guess you read the [super]clickbaity title, and couldn't resist it, huh? Well, no worries, I <strong>promise</strong> you <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f601.svg\"> this is gonna be good.</p>\n<h1 id=\"History-lesson\"><a class=\"heading-link\" href=\"blog/promisify-callbacks-in-nodejs#History-lesson\">#</a>History lesson <img class=\"emoji\" draggable=\"false\" alt=\"😴\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f634.svg\"></h1>\n<p>NodeJS initially shipped with callbacks for its amazing asynchronous model which made it an overnight star in the first place. And callbacks were cool. You could read a huge file, and write the code in such a way to simply wait for the response to come out. This applied to database reads, XHR calls(ajax). This model was groundbreaking when it came out.</p>\n<p>Callbacks follow this pattern <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f447.svg\"></p>\n<pre><code class=\"language-js\"><span class=\"hljs-title\">callback</span>(param1, param2, param3, (error, <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>)) {\n  // <span class=\"hljs-type\">Do</span> <span class=\"hljs-title\">something</span>\n}</span>\n</code></pre>\n<p>Note, there can be any number of parameters before the actual callback as the last parameter, and the callback doesn't have to have only <code>data</code> either, it can be any number of parameters, or not have any, other than the <code>error</code>.</p>\n<p>But there's a funny thing that happens when you dive super deep into something. <strong>YoU fInD oUt ItS fLaWs.</strong> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f447.svg\"></p>\n<pre><code class=\"language-js\">fs.readdir(source, function (err, files) {\n  <span class=\"hljs-keyword\">if</span> (err) {\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'Error finding files: '</span> + err);\n  } <span class=\"hljs-keyword\">else</span> {\n    files.forEach(function (filename, fileIndex) {\n      console.<span class=\"hljs-built_in\">log</span>(filename);\n      gm(source + filename).<span class=\"hljs-built_in\">size</span>(function (err, values) {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'Error identifying file size: '</span> + err);\n        } <span class=\"hljs-keyword\">else</span> {\n          console.<span class=\"hljs-built_in\">log</span>(filename + <span class=\"hljs-string\">' : '</span> + values);\n          aspect = values.<span class=\"hljs-built_in\">width</span> / values.<span class=\"hljs-built_in\">height</span>;\n          widths.forEach(\n            function (<span class=\"hljs-built_in\">width</span>, widthIndex) {\n              <span class=\"hljs-built_in\">height</span> = Math.<span class=\"hljs-built_in\">round</span>(<span class=\"hljs-built_in\">width</span> / aspect);\n              console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'resizing '</span> + filename + <span class=\"hljs-string\">'to '</span> + <span class=\"hljs-built_in\">height</span> + <span class=\"hljs-string\">'x'</span> + <span class=\"hljs-built_in\">height</span>);\n              <span class=\"hljs-keyword\">this</span>.resize(<span class=\"hljs-built_in\">width</span>, <span class=\"hljs-built_in\">height</span>).write(dest + <span class=\"hljs-string\">'w'</span> + <span class=\"hljs-built_in\">width</span> + <span class=\"hljs-string\">'_'</span> + filename, function (err) {\n                <span class=\"hljs-keyword\">if</span> (err) console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'Error writing file: '</span> + err);\n              });\n            }.bind(<span class=\"hljs-keyword\">this</span>)\n          );\n        }\n      });\n    });\n  }\n});\n</code></pre>\n<p>Oh boy, my eyes bleed <img class=\"emoji\" draggable=\"false\" alt=\"🙈\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f648.svg\"></p>\n<p>I guess this twitter meme was on point <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/promisify-callbacks-in-nodejs-goku-meme/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/promisify-callbacks-in-nodejs-goku-meme.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"Enter-promises\"><a class=\"heading-link\" href=\"blog/promisify-callbacks-in-nodejs#Enter-promises\">#</a>Enter promises</h1>\n<p>Promises radicalized the whole scene. They made our code even cleaner. They follow a much simpler structure. No need for all that indentation inside indentation inside indentation. Max to max 1 level of indentation is needed</p>\n<pre><code class=\"language-js\">const finalData = fetch(<span class=\"hljs-string\">'https://api.example/com'</span>)\n  .<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(req)</span> =&gt;</span> req.json())\n  .<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(data)</span> =&gt;</span> cleanUpData(data))\n  .<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(data)</span> =&gt;</span> doEpicShit(data));\n</code></pre>\n<p>Using the <code>.then</code> pattern made life super easy.</p>\n<p>And then came <mark>async/await</mark>. Above code became even simpler:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-symbol\">'https</span>:<span class=\"hljs-comment\">//api.example.com');</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> req.json();\n<span class=\"hljs-keyword\">const</span> finalData = cleanUpData(data);\n\ndoEpicShit(finalData);\n</code></pre>\n<p>So flat <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f607.svg\"></p>\n<h1 id=\"Callback-to-Promise\"><a class=\"heading-link\" href=\"blog/promisify-callbacks-in-nodejs#Callback-to-Promise\">#</a>Callback to Promise</h1>\n<p>Converting callbacks to promises in NodeJS is very simple. If you're using <code>fs.readdir</code>.</p>\n<p>We'll redefine it:</p>\n<pre><code class=\"language-js\">const readdirPromise = <span class=\"hljs-function\"><span class=\"hljs-params\">(folderPath)</span> =&gt;</span>\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(resolve, reject)</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> fs.readdir(folderPath, <span class=\"hljs-function\"><span class=\"hljs-params\">(err, filenames)</span> =&gt;</span>\n      err != <span class=\"hljs-literal\">null</span> ? reject(err) : resolve(filenames)\n    );\n  });\n</code></pre>\n<p>Just do it for every single function <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f609.svg\"></p>\n<p><strong>NOTE</strong>: The above part was a joke. You don't need to redefine every single callback function like that.</p>\n<h2 id=\"Serious-way...\"><a class=\"heading-link\" href=\"blog/promisify-callbacks-in-nodejs#Serious-way...\">#</a>Serious way...</h2>\n<p>Since Node 8, there's been a built-in helper function into Node, called <code>promisify</code>. It's the easiest way to promisify your callbacks. Check it out <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f447.svg\"></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> { promisify } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'util'</span>);\n\n<span class=\"hljs-keyword\">const</span> callbackP = promisify(callback);\n\n<span class=\"hljs-keyword\">await</span> callbackP();\n</code></pre>\n<p>That's it. Just pass your callback to <code>promisify</code>, and it will magically be <code>.then</code>able and <code>await</code>able.</p>\n<h1 id=\"About-filesystem-API...\"><a class=\"heading-link\" href=\"blog/promisify-callbacks-in-nodejs#About-filesystem-API...\">#</a>About filesystem API...</h1>\n<p>Most of the time, you'll end up needing promisification for the <code>fs</code> API in NodeJS. But there's a good news. <code>fs</code> <strong>already ships with promise based version of its functions</strong>.</p>\n<p>Check out my article to know this uncanny art: <a href=\"https://puruvj.dev/blog/fs-promises\" target=\"_blank\" rel=\"noopener\">Simple code with fs.promises and async await</a>.</p>\n<p>Hope you got something good out of it <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f607.svg\">.</p>\n<p>Thank you for reading.</p>\n","id":"promisify-callbacks-in-nodejs","reading_time":1.9675}