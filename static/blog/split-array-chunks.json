{"title":"Split Array into `n` number of chunks","description":"Split an array into `n` number of multiple arrays with JavaScript","date":"27 sep, 2020 10:45 AM","cover_image":"media/blog-social-intro.png","body":"<p>Recently, while making my blog, I ran into a problem. I was using headless chrome to take snapshot of the URLs provided on the <mark>Works</mark> page, and it was turning out to be quite slow, even on Cloud Servers, which have top-notch internet and processing speed.</p>\n<p>I was passing it a URL at a time, it would go to it, take a snapshot, then move to the next URL, and so on. It was a very linear process.</p>\n<p>But those servers being so powerful, they could've snapshot 5 pages at once at the speed it takes for 1 page. So I decided to split the work up in chunks. I broke the urls up in chunks of 5. Chrome would snapshot those 5 simultaneously, and when it was done with all, it would move on to the next 5, and so on. The times reduced to a <code>third</code> of the time.</p>\n<p>Consider this array <code>list</code>. For our purposes, let's just deal simply with numbers rather than URLs.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">const list</span> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n</code></pre>\n<p>Now I want to split it into chunks of 5, like this,</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> splitList = [\n<span class=\"hljs-string\">  [1, 2, 3, 4, 5]</span>,\n<span class=\"hljs-string\">  [6, 7, 8, 9, 10]</span>,\n<span class=\"hljs-string\">  [11, 12]</span>,\n];\n</code></pre>\n<p>Or chunks of 4:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> SplitList = [\n<span class=\"hljs-string\">  [1, 2, 3, 4]</span>,\n<span class=\"hljs-string\">  [5, 6, 7, 8]</span>,\n<span class=\"hljs-string\">  [9, 10, 11, 12]</span>,\n];\n</code></pre>\n<p>You get the idea.</p>\n<h1 id=\"Code\"><a class=\"heading-link\" href=\"blog/split-array-chunks#Code\">#</a>Code</h1>\n<p>The code for splitting an array in its simplest form would be:</p>\n<pre><code class=\"language-js\">/**\n * @<span class=\"hljs-keyword\">param</span> {Array} <span class=\"hljs-keyword\">arr</span> <span class=\"hljs-keyword\">The</span> <span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">be</span> <span class=\"hljs-keyword\">broken</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">chunks</span>\n * @<span class=\"hljs-keyword\">param</span> {number} <span class=\"hljs-keyword\">n</span> <span class=\"hljs-keyword\">The</span> <span class=\"hljs-keyword\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">items</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">chunk</span>\n */\nfunction chunks(arr, n) {\n  let items = [...arr];\n  return new Array(Math.ceil(items.length / n))\n    .fill()\n    .map(() =&gt; items.splice(0, n));\n}\n</code></pre>\n<p>Let's break it down piece by piece:</p>\n<ul>\n<li>\n<p>We're returning an <code>Array</code> with the number of items defined by <code>Math.ceil(items.length / n)</code>. if <code>items.length</code> is 12, and <code>n</code> is 5, we would get the devision as 2.4 . More than 2, less than 3. 2 items(11, 12) will be leftover, and will need to be accomodated in 3rd array, so <code>Math.ceil</code> the division.</p>\n</li>\n<li>\n<p><code>.fill()</code> simply fills the array up with <code>undefined</code>. This is to get an array with the required size, and we can modify those values later. The example above would return <code>[undefined, undefined, undefined]</code>.</p>\n</li>\n<li>\n<p><code>.map()</code> We're traversing over every value in the array of <code>undefined</code> and replacing it with a chunk of the <code>items</code> array. <code>splice</code> removes a chunk from the given array and returns as the value for the <code>.map</code></p>\n</li>\n<li>\n<p>Lastly, notice we're cloning <code>arr</code> into <code>items</code>. This is required to not mutate the original value.</p>\n</li>\n</ul>\n<h2 id=\"Explanation\"><a class=\"heading-link\" href=\"blog/split-array-chunks#Explanation\">#</a>Explanation</h2>\n<p>Let's see how <code>splice</code> works</p>\n<pre><code class=\"language-js\">const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n<span class=\"hljs-built_in\">\nconst </span>spliced = arr.splice(0, 3);\n\n// let's print both the original<span class=\"hljs-built_in\"> array </span>and spliced<span class=\"hljs-built_in\"> array\n</span>console.log(spliced); // Output: [1, 2, 3]\n\nconsole.log(arr); // [4, 5, 6, 7, 8, 9]\n</code></pre>\n<p><code>splice</code> mutated the original array.</p>\n<p>That's what would happen in the <code>chunks</code> function.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>];\n\n<span class=\"hljs-keyword\">const</span> chunked = chunks(arr, <span class=\"hljs-number\">5</span>);\n\nconsole.<span class=\"hljs-built_in\">log</span>(arr); <span class=\"hljs-comment\">// Output: []</span>\n</code></pre>\n<p><code>chunks</code> would remove all the values from the original array. However due to cloning the passed array and working on it, we avoid this problem.</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"blog/split-array-chunks#Conclusion\">#</a>Conclusion</h1>\n<p>Go chunk it up <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜‰\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f609.svg\"> <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜œ\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f61c.svg\"> <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ¤£\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f923.svg\"></p>\n","id":"split-array-chunks","reading_time":1.635}