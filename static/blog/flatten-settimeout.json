{"title":"Simplify code by promisifying `setTimeout`","description":"Simplify and clean your codebase by making setTimeout more idiomatic using Promises","date":"28 Sep, 2020 2:34 PM","cover_image":"media/timer.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 56.25%;background-color: rgb(119, 57, 23)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/timer/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/timer/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/timer/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/timer/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/timer/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Recently, when I was working on my practice project <a href=\"https://ms-todo.vercel.app\" target=\"_blank\" rel=\"noopener\">Microsoft Todo Clone</a>, I needed to implement code like this:</p>\n<pre><code class=\"language-txt\"><span class=\"hljs-meta\">#1 Do Task 1</span>\n<span class=\"hljs-meta\">#2 Wait for 200ms</span>\n<span class=\"hljs-meta\">#3 Do task 2</span>\n<span class=\"hljs-meta\">#4 Wait for 200ms</span>\n<span class=\"hljs-meta\">#5 Do Task 3</span>\n</code></pre>\n<p>Notice <code>#2</code> and <code>#4</code>. They smell of <code>setTimeout</code> <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜–\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f616.svg\">. <code>setTimeout</code> takes in a callback, meaning there will be an indentation. Whenever those appear, means the code's gonna get ugly.</p>\n<p>So I wrote this code in JS</p>\n<pre><code class=\"language-js\">doTask1();\n\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  doTask2();\n\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    doTask3();\n  }, <span class=\"hljs-number\">200</span>);\n}, <span class=\"hljs-number\">200</span>);\n</code></pre>\n<p>Now you can see for yourself, this code SMELLS. BAD.</p>\n<p>The moment I wrote it, I knew it wouldn't work in long-term. What if I needed to an extra step of waiting and doing a Task #4? Or rearranging the order.</p>\n<p>So, I declared a utility function and it solved the problem completely.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/**\n * @param {number} time Time to wait for in milliseconds\n */</span>\n<span class=\"hljs-keyword\">function</span> wait<span class=\"hljs-constructor\">For(<span class=\"hljs-params\">time</span>)</span> {\n  return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Promise((<span class=\"hljs-params\">resolve</span>)</span> =&gt; set<span class=\"hljs-constructor\">Timeout(<span class=\"hljs-params\">resolve</span>, <span class=\"hljs-params\">time</span>)</span>);\n}\n</code></pre>\n<p>Here we're returning a <code>Promise</code>, which resolves when the <code>setTimeout</code> function inside runs.</p>\n<p>It's usage would be as simple as</p>\n<pre><code class=\"language-js\">await waitFor(<span class=\"hljs-number\">200</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>So the spaghetti code above could be rearranged like this:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Task1()</span>;\n\nawait wait<span class=\"hljs-constructor\">For(200)</span>;\n\n<span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Task2()</span>;\n\nawait wait<span class=\"hljs-constructor\">For(200)</span>;\n\n<span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Task3()</span>;\n</code></pre>\n<p>See how simple it became? It reads exactly like the text version I wrote at the top. It's very idiomatic <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜Ž\" src=\"https://twemoji.maxcdn.com/v/13.0.1/svg/1f60e.svg\">.</p>\n<h2 id=\"Shorter-code\"><a class=\"heading-link\" href=\"blog/flatten-settimeout#Shorter-code\">#</a>Shorter code</h2>\n<p>That code snippet could be simplified further</p>\n<pre><code class=\"language-js\">const waitFor = <span class=\"hljs-function\"><span class=\"hljs-params\">(time)</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(resolve)</span> =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(resolve, time));\n</code></pre>\n","id":"flatten-settimeout","reading_time":0.8775}