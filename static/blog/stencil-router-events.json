{"title":"StencilJS Route Change events - Without any dependencies","description":"How to detect route changes in StencilJS Router using the core StencilJS APIs. No dependencies.","date":"3 June, 2020 01:46","cover_image":"media/blog-social-intro.png","body":"<p>Hey Stencil user! Are you using the official <a href=\"https://github.com/ionic-team/stencil-router/wiki\" target=\"_blank\" rel=\"noopener\">StencilJS Router</a> and can't find how to detect route change events? Don't worry, my friend! You will find all the answers here.</p>\n<p>So, is there an <code>onRouteChange</code> event somewhere? Or something like <code>router.subscribe</code>?</p>\n<p>Nope. Its much simpler. Much much simpler, but for some reason, its not documented in the official Wiki (As of the time of writing), resulting in people using the <a href=\"https://ionicframework.com/docs/api/router\" target=\"_blank\" rel=\"noopener\"><code>ion-router</code></a> instead, where everything is very very well documented.</p>\n<p>I myself had to port an application from Stencil Router to Ion router just because of this very reason, and it was a total pain.</p>\n<p>But after some searching and experimenting, I figured it out (No not time travel, I ain't Tony Stark). And it was staring me in the face. It was that simple. Its built right into the very core of Stencil's architechture.</p>\n<h1 id=\"Solution\"><a class=\"heading-link\" href=\"blog/stencil-router-events#Solution\">#</a>Solution</h1>\n<p>So here's your typical Stencil component.</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> { Component, Prop, h } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@stencil/core\"</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">\"my-first-component\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-meta\">@Prop</span>() name: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>My name is {this.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<p>This becomes</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> { Component, Prop, h, Watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@stencil/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { LocationSegments, injectHistory } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@stencil/router\"</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">\"my-first-component\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-meta\">@Prop</span>() name: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-comment\">/**\n   * Remember, this should be `location only`\n   */</span>\n  <span class=\"hljs-meta\">@Prop</span>() location: LocationSegments;\n\n  <span class=\"hljs-comment\">/**\n   * Now watch for any changes to the location property\n   */</span>\n  <span class=\"hljs-meta\">@Watch</span>(<span class=\"hljs-string\">\"location\"</span>) <span class=\"hljs-function\"><span class=\"hljs-title\">onRouteChange</span>(<span class=\"hljs-params\">newRoute, oldRoute</span>)</span> {\n    <span class=\"hljs-comment\">// Do some epic shit</span>\n    <span class=\"hljs-comment\">// Like changing document title or</span>\n    <span class=\"hljs-comment\">// Route animations. Its your choice.</span>\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>My name is {this.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<p><strong>STOP!! It will still not work.</strong></p>\n<p>Yup this code will still not work. Let me explain why:</p>\n<p>The important bit here is the <code>location</code> prop. Think about it. Its a <strong>Prop</strong>. You pass a value to it. But here, nothing really is passing any value to our component here. Stencil certainly ain't.</p>\n<p>So, the solution is to have <em>something</em> pass a value to the <code>location</code> prop. Notice the <code>injectHistory</code> method we have imported but not used anywhere. Now's the time to use it. Just add this line at the very end of your file</p>\n<pre><code class=\"language-javascript\">injectHistory(MyComponent)<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p><code>MyComponent</code> is the name of the class declared above.</p>\n<p>So the final code becomes:</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> { Component, Prop, h, Watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@stencil/core\"</span>;\n<span class=\"hljs-keyword\">import</span> { LocationSegments, injectHistory } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@stencil/router\"</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">\"my-first-component\"</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-meta\">@Prop</span>() name: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-comment\">/**\n   * Remember, this should be `location only`\n   */</span>\n  <span class=\"hljs-meta\">@Prop</span>() location: LocationSegments;\n\n  <span class=\"hljs-comment\">/**\n   * Now watch for any changes to the location property\n   */</span>\n  <span class=\"hljs-meta\">@Watch</span>(<span class=\"hljs-string\">\"location\"</span>) <span class=\"hljs-function\"><span class=\"hljs-title\">onRouteChange</span>(<span class=\"hljs-params\">newRoute, oldRoute</span>)</span> {\n    <span class=\"hljs-comment\">// Do some epic shit</span>\n    <span class=\"hljs-comment\">// Like changing document title or</span>\n    <span class=\"hljs-comment\">// Route animations. Its your choice.</span>\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>My name is {this.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n  }\n}\n\ninjectHistory(MyComponent);\n</code></pre>\n<p>Here. Hope it helps. If you still run into issues, just ping me on Twitter. The link is in the footer.</p>\n<p>Goodbye and Enjoy!</p>\n","id":"stencil-router-events","reading_time":1.47}